= LLMとライティングの交差点

LLM（大規模言語モデル）で仕事は効率化したのか？LLMにドキュメントは書けるのか？LLMとライティングが交差する場所を綴る。

//pagebreak

== 「ちょっと待って。これ何の話？」にならないために

誰かに「ちょっといい？あのさ……」と話しかけられたとき、話がはじまってもしばらくの間は相づちを打ちながらバックグラウンドで「これ何の話だ？どこに向かってるんだ？」という推測していることがある。そういうときは推測に脳みそのリソースが一定割かれているので話がイマイチ頭に入ってこない。これって一定量のデータが揃わないと再生がスタートしないストリーミング配信みたいだなといつも思う。

どこに向かっているのか分からない車に乗せられていると「どこに行くの？何しに行くの？」と不安で景色を楽しむどころではないけど、「今日は誕生日なので高速道路をぶっ飛ばして名古屋のレゴランドに行くぞー！」と言ってもらえれば「たしかに！言われてみれば新東名だ！」と景色から情報が得られるようになる。人間はゴールが分からないと話が頭に入ってこない。

そしてみんな忙しいので、いつまでも話のゴールが分からないと推測を諦めて「ごめん、これ何の話？」と聞いてしまうか、あるいは理解を諦めてぼんやり聞くことになる。

どんな話も最初から身を入れて聞きたいので、できればこれからはじまる話は何か決めるための相談なのか、疑問を解消するための質問なのか、褒めてもらいたい自慢なのか、言いにくい決定事項を伝える伝達なのか、あるいはただうんうんと聞いてほしいだけの雑談なのか、先に言ってくれるとありがたい。

お土産を配り歩いている人が段々近づいてきたとき、「私にもくれるかな？」と内心思っていても、強欲だと思われないよう、一応声をかけられてから初めて「え、ありがとうございます！」と気づいたようなそぶりをしている。

自慢するのは気恥ずかしいので、普通の話の中にそれとなく混ぜ込んで、相手が褒めてくれてからようやく「いやあ、そんなそんな。自慢のつもりじゃなかったんですが……」と謙遜するそぶりを見せたくなるが、そういう遠回しな自慢の仕方はむしろ相手を「何の話かと思ったら……あー、自慢話か？」と疲れさせるだけなので、近年は「私は今から自慢をするので、わーそれはすごいですね、天才ですかと答えてください。はい、いきます！」と期待値を先に提示してから堂々と自慢するようにしている。

ただたまに、即時で「わーそれはすごいですね天才ですかー」と棒読みで言ってくるせっかちな人がいるので、そのときは「まだ！まだ自慢を言ってません！ちょっと早すぎる！もうちょっと人の心を感じさせる間合いでお願いします！」と追加でリクエストしている。期待と違うレスポンスがきたときは、対人間の会話でもプロンプトを改善していこうな。

== LLMで仕事は「効率化」したか

ChatGPTのようなLLM（大規模言語モデル）によって、実際のところライティングの仕事は効率化しましたか？LLMをライティングに活用していますか？と聞かれることが増えてきた。

2025年11月時点@<fn>{covid}だと、「使える場面はあるけど、何にでも使えるわけではない」というのが私の回答。

//footnote[covid][コロナ禍も当時は「これ、いつ終わるんだ……終わる気がしない……」と思っていたが、今となってはどんな気持ちで毎日過ごしていたのか正確には思い出せなくなってきている。LLMの流行りもCursor、Claude Code、Codexと恐ろしい速度で変わっていっている。正直、「あれ触ってみないとな」と思っても、ぼやぼやしたまま2週間経つともう次が流行っていて「あれはもう古い」となっているような状況だ。さすがに昨日と今日と明日のような日単位では世界は劇的に変わらないとしても、こうやって特定のタイミングで素直な気持ちをスパッと切って残しておくと、後々貴重な断面になるのだなぁと思っている。]

たとえば自転車の漕ぎはじめはペダルが重くてしんどい。けど速度が乗ってくれば少し漕いだだけでぐいぐい進む。文章もそれと同じで、0から書く部分がいちばんしんどいので、何か文章を書こうと思ってパソコンの前に座ったけど、どうにも書きあぐねている……というときは、雑な指示をLLMに出して初案を書いてもらうといいと思っている。出力されたゴミみたいな初案を見て「違う違う！私の言いたいことはそうじゃない！」とカッとなりながら直していくと、なんとあっという間に書き上がる。これがLLMがライティングの仕事で「使える」方の場面。

一方、LLMが出力した文章が自分の理解を超えていて、整った文章だけど何を言っているのか、どういう意味なのかよく分からないときに、それをそのまま自分の書いた文章として出すのはやめてほしいなと思っている。こっちがLLMをライティングの仕事で「使えない」方の場面。

いやいやLLMで書いた文章の内容を自分が理解できていなくても、内容の正しさは他の人にレビューしてもらえばいいじゃない、という人もいるかもしれない。

でも、たとえば企画担当者がLLMで作った「業務知識に基づく根拠」も「動作確認による裏付け」もない空虚な仕様追加の提案書を、エンジニアに「これで実装いけるかちょっと見てください」と頼んだらどうなるだろう？

提案書の内容はは一見それっぽく見えるかもしれないけど、実在しない機能に仕様を追加したり、実動作とは異なる動作を前提に辻褄の合わない変更をしようとしたり、見る人が見れば明らかにおかしいところが色々ある。

「ちょっと見て」と頼まれたエンジニアは「なんかおかしいな、これ」と思いながら時間をかけて読み解いたが、おかしいところが多すぎて何を言っているのか全然分からないので、「これってこういう機能でしたっけ？この変更は矛盾しているように見えるんですがどういう意図ですか？」などと色々質問する。

そして元の提案書を理解していない企画担当者は、エンジニアからの質問も何を聞かれているのかが分からないので再びLLMに質問を丸投げして、また理解していないままLLMのちぐはぐな返答を送る。地獄！でも最近実際こういうライトな地獄を見るような気がする！

こうなってくると、これは果たして本当に「業務が効率化している」と言えるのでしょうか？@<fn>{kawata}

//footnote[kawata][ここは川田さんのポストが思いっきり言いたいことを言ってくれていたので参考にしました。ありがとうございます。https://hiragram.app/posts/e0uFGoNP]

自分が書いたものについて質問されたとき、中身を自分でちゃんと理解していないとぱっと答えられないどころか議論もできず、いちいちLLMに「こう質問されてるんだけど、どう答えたらいいかな？」と聞くことになってしまう。こうなってくるともはやその人はLLMの伝書鳩でしかなくて、エンジニアとLLMの間に挟まって伝書鳩をするだけの人間だったら、別にそこにいる意味がないのでいなくていい。

速く書くために使えるものはLLMに限らずなんでも使おう。だけど、我々は生成AIの伝書鳩ではないので、自分が「書いたもの」には責任を持ちたいですね。コードでも文章でも同じように。

== 生成AIにやり直しをさせるとどんどんひどくなっていって「最初のがいちばんましだった」となる

生成AIにコードでも絵でも文章でも何か作らせたとき、出てきたものに対して「あー、そうじゃなくてここをこうしてほしい」と訂正をかければかけるほど、成果物がどんどんひどくなっていって、結局「これなら最初のやつがいちばんマシだった……」となるのよくあるよね？あれ何なんだろう？

周りにも聞くと「あー、あるある」となっており、これについて夫と色々話していたところ、「こういうことでは？」という案が出てきた。

人間に対してフィードバックをした場合は、順当にいけば指摘を受けたところが改善されるので、少なくとも『1回目のいいところはそのままで、悪いところが直ったものが2回目で出てくるだろう』という期待値がある。

でも生成AIにおいては何回やろうと出てくる結果はいわゆるガチャでしかないので『1回目のいいところが失われて、さらに悪いところも直っていないものが2回目で出てくる』が普通にありうる。

生成AIに指示している人間側は、1回目で60点だったら、指摘した2回目は65点、さらに指摘した3回目には70点が出てくるよね、と無意識に思っているんだけど、実際は60点→45点→65点→50点……のようなランダムな点数しか出てこない。回を重ねるごとに期待値は無意識にどんどん上がり、ガチャで出てくる結果との乖離も段々広くなっていって『やればやるほどどんどん悪くなった』と感じるのではないか、という説。

非常に納得できた。結果はランダムでしかないんだけど、こっちが求めるものが段々上がっているから、段々ひどくなっていくと感じる説。あると思います。

== LLMって実際ドキュメントで「使える」んですか？

LLMにドキュメントを書かせてみた。ちょっと書く程度じゃなくて、いわゆるVibe Codingのように、私は仕様を渡したり指示を出したりするだけで「書く」部分は全部LLMにやらせる方式でがっつり書かせてみた。使ったのはClaude Sonnet 4.5。

結果、私の場合は「いい感じのカレーライスが出てきたと思ったが、食べてみたら茶色いのはルゥじゃなくて土でした」みたいに、ぱっと見はよさそうなのに実際は「そのままだとちょっと使い物にならないですね……これを元に手直しするなら私が0から作った方が早いです……」みたいな体験と相成った。

つまりぱっと見は良さそうなのに、その分野に精通した人間からするととても使いものにならないような瑕疵がランダムに混ざっていることがある。だからこそ「企画職がプロトタイプのサイトを生成AIに作らせる」とか、「エンジニアが生成AIに絵を描かせる」みたいに「自分の専門でない分野」をやらせたときの「すごい！！！これがあればもう○○（職業名）いらないじゃん！！」みたいな感動が大きいんだろうなと。

自分の専門分野だったら「いやこれ土ですし……どこを直せばとかではなくて……いや、茶色いの土なので……ちょっとお客さんに出せるカレーライスじゃないですよ？」って指摘できるけど、知らない分野ならいい感じのカレーライスにしか見えないのでそのまま客にも出せそうに思える、という。

カレーの代わりに土がかかって出てきたら、そのカレー屋さんは営業停止じゃないですか。

でも毎回絶対土なわけじゃなくて、ちゃんとしたカレーライスが出てくることの方が多いんだから、土の時だけレビューで止めればいいじゃないですか、というご意見もあることでしょうが、それは「当たりのときだけ宝くじだけ買えばいいじゃない」みたいな話ですね。

人間が作ったカレーなら「いつもよりちょっと味が薄い」「トッピングのほうれん草を載せ忘れてる」くらいの瑕疵なので、毎回ほどほどのレビューで済むけど、稀にであっても土が出てきたりご飯の代わりに虫がよそってあったりするカレーライスが出てくる可能性があるなら、毎回全力で虱潰し@<fn>{rice}のレビューをしないといけないので、レビューのコストが高くなりすぎる。

//footnote[rice][これはrice（白米）の代わりにlice（シラミ）という虱潰しにかけたジョークです。読んだら「わーすごいですね」と言ってください。]

あと指摘による学習の再現性がなさ過ぎて徒労感がひどい。なんというか通常のレビューだったら指摘したことと、その理由を説明したら後輩がちょっと賢くなっていくので、指摘の意味があるんだけど、それが何もないので「私がやった方が早いし、いいものできますね」でしかない。

なので現状、「実際のところ、生成AIどうです？」と聞かれたら「自分の専門分野じゃないところで、人間にやらせるには非人道的すぎる仕事（たとえば使い捨てにする何かを100個作らせるとか）をやらせるにはいいよね」という解に到りつつある。

人間にやらせるには非人道的すぎる仕事というのは、例えば学校の夏休みの宿題で「税金にまつわる575」を10個書かせるとかですね。人間が真面目にやったらチベットスナギツネの顔になるやつです。

== クレープの親概念をクレープにしない

名前をつけろ。名前をつけろ。何か説明するときも「道路のこっち側とあっち側に人がいて、こっち側の人があっち側に向かうと……」みたいに話すんじゃなくて、「道路の右にいる人をAさん、道路の左側にいる人をBさんとします。Aさんが道路を渡って左側に向かうと……」みたいに仮でもいいから名前を付けて話した方が絶対わかりやすいし、話がごちゃつかない。名前をつけろ！隙あらば名前をつけろ！

あともうひとつ、名前をつけるときに上位概念と下位概念を同じ名前にしないようにしたい。
もともとクレープを売っていた、そこにチョコクレープがバリエーションで増えた。このときクレープとチョコクレープをまとめたカテゴリの名前はなににするか？

非常にありがちなのが、上位概念の名前も元のままクレープで、下位にクレープとチョコクレープがぶら下がるパターン。別にまあいいよね、現状を踏襲で。なんなら上位概念の名前は考えてなくて、誰かが適当にクレープと呼んだりもする。

安易に上位概念もクレープ、下位の概念もクレープとチョコにすると、「クレープ半額デー」みたいなことをやったときにチョコクレープも半額になるのか否か解釈が分かれて、お客さんから「クレープ半額って言ったじゃない！」とクレームが出ます。

なので個人的には上位概念がクレープで、元々クレープと呼んでいたものはプレーンとかにすべきです。チョコクレープが生まれたときにチョコクレープの名前を考えるのは当たり前だけど、一見関係ないクレープの名前まで「プレーン」に変えようというのは見落としがちなので、これをクレープ問題と名付けて後生に語り継いでいきましょう。

私は何の変哲もないシュガーバタークレープが好きです。

== なぜドキュメントの汎用的なルールはないのか？

婆さんや、ドキュメントの汎用的なルールはないかのう？
結論から言うとないんじゃよ。
これだけデカい会社なので、ドキュメントを書くときの全社的な汎用ルールくらいあると思うだろうけど、今のところないんじゃよ。
その理由を書く前に、「汎用的なルール」を求めてる爺にとって嬉しそうなものを紹介しておくね。
:1: SmartHRさんが出しているtextlintのルールプリセット
https://note.com/smarthr_co/n/n881866630eda
:2: prhのルール（中にgihyoのWEB+DB PRESSにおけるルールなどが含まれてる）
https://github.com/prh/prh
:3: LINE Developers writing style guide
https://wiki.workers-hub.com/display/linedevelopers/LINE+Developers+writing+style+guide
:4: 日本語スタイルガイド（第3版）
https://jtca.org/learn-tc/publication/guide_jsg/
んで、以下は「分かりやすい文章を書くための全社的な汎用ルールプリセット」がなぜないのか、という理由じゃよ。
（婆口調が面倒になってきたので以下は普通に喋ります）
読み手の属性によって「分かりやすい文章」はびっくりするくらい異なります。
新卒研修のときもちらっとお話ししたように、たとえば私がDNSに関する勉強会をやるとして、参加者が「インターネット？ほぼ使ってないです。インスタはやってますけど」というレベルの大学生なのか、それとも「Aレコードは登録したことあります」というレベルのプログラマなのかによって、伝えるべき内容や、伝え方は大きく異なってきます。
みんなの属性が違うなら、理解度の低い側に合わせれば全員にとって分かりやすいんじゃないかというと実はそうでもなくて、誰かにとっての「丁寧で易しくてすごく分かりやすい文章」が、他の誰かにとっては「既に知っている前提をだらだらと書いた無意味に冗長で分かりにくい文章」だったりします。
すべての台所で使える汎用的な「おいしい料理を作るためのルール」を作ろうとしても、居酒屋ならガッツリしてて味が濃い方が大正解だけど、病院ならカロリー控えめの減塩食が大正解であるように、内容や読み手やそれぞれ異なる場所で汎用的なルールを作るのはすごく難しいんですね。
いやいや、それでも「料理をする前には石鹸でよく手を洗う」みたいな汎用ルールもあるじゃん、と思われるかもしれませんが、そこまでいくともう小学校の国語の教科書がルールですね…みたいになって、恐らく求めているものではないんじゃないかなと思います。
最初からルールがあって、そのルールに沿って書いていきたい、書いてから後戻りするのは非効率なので避けたい、という気持ちはよーく分かるんですが、やっぱり読み手や目的によってルールは違っていて、かつ一定の文章量がないとルールも決めかねる部分があるので、最初は:1: 〜:4: で紹介したようなプリセットルールをガイドにしつつ「揃ってなくても伝わればいいよ。ないよりある方が素晴らしい！」でごりごり書いていって、ルールが決まったら直していくのがスピードも鈍らなくてよいなぁ、というのが最近の所感です。（一定文章量が溜まってきたら自分たちでルールを足しつつ、新しいルールを決めたときに都度揃えていく、という）
なので「LINEというアプリ上での文言を書くときのルール」とか、「LINE Developersサイトで開発者向けの文章を書くときのルール」はあるんだけど、全社で使える大統一汎用ルールはなさそう、というのが婆の認識じゃよ。

== 情報量が無の通知はディズニーランドしか許されない

== 「直さなくて済むための言い訳」を探さない


== 既存と独壇場と知ってて当たり前と読みにくい文章に怒るかの話

== 持ち時間を守る

「持ち時間を守る」は話が上手い下手よりももっと手前の大前提なので、タイムキーピングをガン無視して喋るのできればやめてほしいめう

== クローズドなイベント

有料でクローズドなイベント、感想も出てこないしインターネットにおいて無風なので＆その瞬間だけで積み上がらないのであんまり好きではないのであった。せめて後日アーカイブは無料公開とかしてくれたらなぁ。

== 取り繕うな、駄々を捏ねろ

昔の職場でえらい人に辞意をつたえようと席に近づいていったら、謎の直感で察したのか「こっち来るな！それ以上言うな！聞きたくない！みんな俺に辞めるって言いにくる！いやだー！」って耳を塞いでいた。潔いくらいの駄々のこね方だ。見習いたい。

まあ滅多に話しかけてこない人が、真面目な顔で近づいてきたら察してしまうのも分かる。「ご相談」みたいな予定を入れられると、その時間までそわそわして何もできなくなってしまうので、できれば「ご相談（退職じゃなくていい話です）」くらい中身を匂わせておいてほしい。

みんなも上司の心臓を鍛えるため、用もないのに5分に1回くらい話しかけに行こう。そして油断させてからある日突然退職を切りだそう。

== 日本語入力システムのサポートとお節介

すごく面白いんだけど、Google日本語入力の「こう書きたいんだろ？」という感じが苦手だったので、これもなんとなく苦手そう。
文章のオーナーシップは自分が持つべきだと思っているので、ツールや他者ができるのはsuggestionするところまでで、「統計的にこれのあとにはこの単語がくるので、これにしておきました」とoverwriteしてくるのは線を踏み越えて来てない？と感じるのであった。
https://knowledge.sakura.ad.jp/42901/
https://x.com/miwa_ensan/status/1818545939134791903

== 知らないことには気をつけられない

そういえば割り引きって、日本だと「2割引！」みたいに割り引く分を書く（つまり1000円の2割引で800円）んだけど、台湾だと「打8折！」みたいに割り引き後の価格分を書く（つまり1000元の8割なので800元）なので、「打8折！」を見て単純に「8割引！」に翻訳すると

