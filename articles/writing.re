= LLMとライティングの交差点

== 「これ何の話？」が分からないと入ってこない

誰かに「ちょっといい？あのさ……」と話しかけられたとき、話がはじまってもしばらくの間は相づちを打ちながらバックグラウンドで「これ何の話だ？どこに向かってるんだ？」という推測が続くので、話がイマイチ頭に入ってこない。これって一定量のデータが揃わないと再生がスタートしないストリーミング配信みたいだなといつも思う。

どこに向かっているのか分からない車に乗せられていると、「どこに行くの？何しに行くの？」と不安で景色を楽しむどころではないけど、「今日は誕生日なので名古屋のレゴランドに行くぞー！」と言ってもらえれば「たしかに！言われてみれば新東名だ！」と景色から情報が得られるようになる。人間は目的地が分からないと話が頭に入ってこないのだ。

みんな忙しいので、お互いの「本当に必要だったもの」に早く辿り着きたくて、いつまでも話の意図が分からないと「ごめん、これ何の話？」と聞きたくなってしまう。あるいは「これ、質問だったのか！」に気づくまでにかなり時間がかかったりして、その間「これはもしかして辞めたいという相談では？」みたいな警戒心マックスで聞くことになるので、これからはじまるのは何か決めるための相談なのか、結論が知りたい質問なのか、褒めてほしい自慢なのか、言いにくいことを伝える伝達なのか、ただお喋りしたいだけの雑談なのか、最初に言ってくれるとありがたい。

言いづらいことでも遠回しに言うと相手を「何の話？何の話？」と疲れさせるだけなので、最近は「今から愚痴を言うので、わーそれは大変だったねーと答えてください」とやってほしいことを最初から開示するようにしている。ただたまに、即時で「わーそれは大変だったねー」と言われるので、「まだ愚痴を言ってません！ちょっと早すぎる！もうちょっと人の心を感じさせる間合いでお願いします」とリクエストしている。プロンプトみたいだなと思う。

== LLMで仕事は「効率化」したか

あー分かる。
たとえば、エンジニア以外の職種の人が、技術的な文脈を含むお知らせや説明文をAIで作成するようなケース。内容はそれっぽく見えるかもしれないが、技術的に正しいかどうか、適切な用語や構成になっているかを判断するのは簡単ではない。
結果として、エンジニアに「技術的に問題ないか見てほしい」とチェックを依頼することになり、作成者の作業は効率化されたかもしれないが、エンジニアの作業量が増えているということになる。
https://hiragram.app/posts/e0uFGoNP

自転車は漕ぎはじめはペダルが重くてしんどいですが、速度が乗ってくれば少しの労力でぐいぐい進みます。文章も同じで、0から書く部分がいちばん重労働で時間がかかります。なので、お知らせの文章を書こうと思ってパソコンの前に座ったが、どうも書きあぐねている……というときは、雑な指示を生成AIに出して初案を書いてもらい、出来上がった初案を読んで直していく方が、悩むばかりで1文字も書けないよりは、ずっと速く書き上がるはずです。

ですが、生成AIが出力した文章が自分の理解を超えていて、正直何を言っているのかよく分からないとき、それをそのまま自分の文章として、自分が書いたお知らせとして外に出すのはいけません。生成AIが書いたものをレビューして、その内容を理解し、間違っているところは直して、最終的に「自分が書いた文章」として内容に責任を持つのが書いた人間の仕事です。

たとえば企画担当者がAIで作った、確固たる根拠や裏付けのない意見が書かれた新機能のお知らせを、「これあってるかちょっと見てください」と頼まれたエンジニアが時間をかけてレビューして、意味が分からないところを質問し、それに企画担当者がAIを使って返答する。こうなってくると、果たして本当に業務が効率化していると言えるのでしょうか？

生成AIが書いたお知らせに対して質問されたとき、中身を自分の言葉でちゃんと理解していないとぱっと答えられず、いちいち生成AIに「こう質問されてるんだけど、どう答えたらいい？」と聞くことになってしまいます。こうなってくるともはや生成AIの伝書鳩です。間に挟まって伝書鳩をするだけの人だったら、別にそこにいる意味がないんですよね。

分かりやすい文章を書くため、あるいは事象をきちんと理解するためのサポートとして生成AIを使うのはいいですが、最終的に出す文章には「私が書いた、私の文章です」と言えるよう自分で責任を持ちましょう。

分かりやすい文章を速く書くために、使えるものはなんでも使いましょう。ただし、生成AIの伝書鳩ではないので自分が出す文章には責任を持ちましょう、というお話でした。


== 生成AIにやり直しさせるとどんどんひどくなっていって「最初のがいちばんましだった」となる話

生成AIに何か作らせたとき、出てきたものに対して「あー、そうじゃなくてここをこうしてほしい」と訂正をかければかけるほど、成果物がどんどんひどくなっていって、結局「これなら最初のやつがいちばんマシだった……」となるのよくあるよね？あれ何なんだろう？と聞くと、みんな「あー、わかる。あるある」と言う。

色々推測した結果、こんな案がでた。

人間に対してフィードバックをした場合は、順当にいけば指摘を受けたところが改善されるので、少なくとも『1回目のいいところはそのままで、悪いところが直ったものが2回目で出てくるだろう』という期待値がある。でも生成AIにおいては何回やろうと出てくる結果はいわゆるガチャでしかないので『1回目のいいところが失われて、さらに悪いところも直っていないものが2回目で出てくる』が普通にありうる。生成AIに指示している人間側は、1回目で60点だったら、指摘した2回目は65点、さらに指摘した3回目には70点が出てくるよね、と無意識に思っているんだけど、実際は60点→45点→65点→50点……のようなランダムな点数しか出てこない。回を重ねるごとに期待値は無意識に段々上がり、ガチャで出てくる結果の乖離も段々広くなっていって『やればやるほどどんどん悪くなる』と感じるのではないか。

わかるー。結果はランダムでしかないんだけど、こっちが求めるものが段々上がっているから、段々ひどくなっていくと感じる説。あると思います。

あと「いい感じのカレーライスが出てきたと思ったが、食べてみたら茶色いのはルゥじゃなくて土でした」みたいに、ぱっと見はよさそうなのに実際は「そのままだとちょっと使い物にならないですね……これを元に手直しするなら私が0から作った方が早いです……」みたいなことが多い。だからこそ「企画職がプロトタイプのサイトを生成AIに作らせる」とか、「エンジニアが生成AIに絵を描かせる」みたいに「自分の専門でない分野」をやらせたときの「すごい！！！これがあればもう○○（職業名）いらないじゃん！！」みたいな感動が大きいんだろうなとも思った。

自分の専門分野だったら「いやこれ土ですし……ちょっとお客さんに出せるカレーライスじゃないですよ？」って指摘できるけど、知らない分野ならいい感じのカレーライスにしか見えないのでそのまま客に出せそうに思える、という。

なので現状、「実際のところ、生成AIどうです？」と聞かれたら「自分の専門分野じゃないところで、人間にやらせるには非人道的すぎる仕事（たとえば使い捨てにする何かを100個作らせるとか）をやらせるにはいいよね、という解に到りつつある。

人間にやらせるには非人道的すぎる仕事というのは、例えば学校の夏休みの宿題で「税金にまつわる575」を10個書かせるとかですね。人間が真面目にやったらチベットスナギツネの顔になるやつです。

あと仕様と参考用のドキュメントをまるごと食わせた上で、新しいドキュメントをAIエージェントにまるっと書かせる、というのもやってみた。

== クレープの親概念をクレープにしない

名前をつけろ。名前をつけろ。何か説明するときも「道路のこっち側とあっち側に人がいて、こっち側の人があっち側に向かうと……」みたいに話すんじゃなくて、「道路の右にいる人をAさん、道路の左側にいる人をBさんとする。Aさんが道路を渡って左側に向かうと……」みたいに仮でもいいから名前を付けて話した方が絶対わかりやすい。名前をつけろ！隙あらば名前をつけろ！

あともうひとつ、名前をつけるときに上位概念と下位概念を同じ名前にしないようにしましょう。

もともとクレープを売っていた、そこにチョコクレープがバリエーションで増えた。このときクレープとチョコクレープをまとめたカテゴリの名前はなににするか？個人的には上位概念がクレープで、元々クレープと呼んでいたものはプレーンとかにすべきです。

そこを考えないで安易に上位概念もクレープ、下位の概念もクレープとチョコにすると、「クレープ半額デー」みたいなことをやったときにチョコクレープも半額になるのか否か解釈が分かれます。

== なぜドキュメントの汎用的なルールはないのか？

婆さんや、ドキュメントの汎用的なルールはないかのう？
結論から言うとないんじゃよ。
これだけデカい会社なので、ドキュメントを書くときの全社的な汎用ルールくらいあると思うだろうけど、今のところないんじゃよ。
その理由を書く前に、「汎用的なルール」を求めてる爺にとって嬉しそうなものを紹介しておくね。
:1: SmartHRさんが出しているtextlintのルールプリセット
https://note.com/smarthr_co/n/n881866630eda
:2: prhのルール（中にgihyoのWEB+DB PRESSにおけるルールなどが含まれてる）
https://github.com/prh/prh
:3: LINE Developers writing style guide
https://wiki.workers-hub.com/display/linedevelopers/LINE+Developers+writing+style+guide
:4: 日本語スタイルガイド（第3版）
https://jtca.org/learn-tc/publication/guide_jsg/
んで、以下は「分かりやすい文章を書くための全社的な汎用ルールプリセット」がなぜないのか、という理由じゃよ。
（婆口調が面倒になってきたので以下は普通に喋ります）
読み手の属性によって「分かりやすい文章」はびっくりするくらい異なります。
新卒研修のときもちらっとお話ししたように、たとえば私がDNSに関する勉強会をやるとして、参加者が「インターネット？ほぼ使ってないです。インスタはやってますけど」というレベルの大学生なのか、それとも「Aレコードは登録したことあります」というレベルのプログラマなのかによって、伝えるべき内容や、伝え方は大きく異なってきます。
みんなの属性が違うなら、理解度の低い側に合わせれば全員にとって分かりやすいんじゃないかというと実はそうでもなくて、誰かにとっての「丁寧で易しくてすごく分かりやすい文章」が、他の誰かにとっては「既に知っている前提をだらだらと書いた無意味に冗長で分かりにくい文章」だったりします。
すべての台所で使える汎用的な「おいしい料理を作るためのルール」を作ろうとしても、居酒屋ならガッツリしてて味が濃い方が大正解だけど、病院ならカロリー控えめの減塩食が大正解であるように、内容や読み手やそれぞれ異なる場所で汎用的なルールを作るのはすごく難しいんですね。
いやいや、それでも「料理をする前には石鹸でよく手を洗う」みたいな汎用ルールもあるじゃん、と思われるかもしれませんが、そこまでいくともう小学校の国語の教科書がルールですね…みたいになって、恐らく求めているものではないんじゃないかなと思います。
最初からルールがあって、そのルールに沿って書いていきたい、書いてから後戻りするのは非効率なので避けたい、という気持ちはよーく分かるんですが、やっぱり読み手や目的によってルールは違っていて、かつ一定の文章量がないとルールも決めかねる部分があるので、最初は:1: 〜:4: で紹介したようなプリセットルールをガイドにしつつ「揃ってなくても伝わればいいよ。ないよりある方が素晴らしい！」でごりごり書いていって、ルールが決まったら直していくのがスピードも鈍らなくてよいなぁ、というのが最近の所感です。（一定文章量が溜まってきたら自分たちでルールを足しつつ、新しいルールを決めたときに都度揃えていく、という）
なので「LINEというアプリ上での文言を書くときのルール」とか、「LINE Developersサイトで開発者向けの文章を書くときのルール」はあるんだけど、全社で使える大統一汎用ルールはなさそう、というのが婆の認識じゃよ。

== 情報量が無の通知はディズニーランドしか許されない

== 「直さなくて済むための言い訳」を探さない


== 既存と独壇場と知ってて当たり前と読みにくい文章に怒るかの話

== 持ち時間を守る

「持ち時間を守る」は話が上手い下手よりももっと手前の大前提なので、タイムキーピングをガン無視して喋るのできればやめてほしいめう

== クローズドなイベント

有料でクローズドなイベント、感想も出てこないしインターネットにおいて無風なので＆その瞬間だけで積み上がらないのであんまり好きではないのであった。せめて後日アーカイブは無料公開とかしてくれたらなぁ。

== 取り繕うな、駄々を捏ねろ

前職のえらい人、退職をつたえるために席に近づいていったら謎に察して「こっち来るな！それ以上言うな！聞きたくない！みんな俺に辞めるって言いにくる！やだー！」って耳塞いでたの思い出した。
潔いくらいの駄々のこね方、見習いたい。
滅多に話しかけてこない人が話がある顔で近づいてきたらまあ察してしまう。。

みんなも上司の心臓を鍛えるため、用もないのに5分に1回くらい話しかけに行こうね。
そんで油断させてからある日突然退職を切りだそう。

== 日本語入力システムのサポートとお節介

すごく面白いんだけど、Google日本語入力の「こう書きたいんだろ？」という感じが苦手だったので、これもなんとなく苦手そう。
文章のオーナーシップは自分が持つべきだと思っているので、ツールや他者ができるのはsuggestionするところまでで、「統計的にこれのあとにはこの単語がくるので、これにしておきました」とoverwriteしてくるのは線を踏み越えて来てない？と感じるのであった。
https://knowledge.sakura.ad.jp/42901/
https://x.com/miwa_ensan/status/1818545939134791903

== 知らないことには気をつけられない

そういえば割り引きって、日本だと「2割引！」みたいに割り引く分を書く（つまり1000円の2割引で800円）んだけど、台湾だと「打8折！」みたいに割り引き後の価格分を書く（つまり1000元の8割なので800元）なので、「打8折！」を見て単純に「8割引！」に翻訳すると

